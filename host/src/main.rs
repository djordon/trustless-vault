// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{VAULT_PROVER_ELF, VAULT_PROVER_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use stacks::blocks::NakamotoBlockHeader;
use stacks::blocks::PublicKey;
use std::collections::BTreeSet;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    let signer_1 =
        hex::decode("41634762d89dfa09133a4a8e9c1378d0161d29cd0a9433b51f1e3d32947a73dc01").unwrap();
    let signer_2 =
        hex::decode("9bfecf16c9c12792589dd2b843f850d5b89b81a04f8ab91c083bdf6709fbefee01").unwrap();
    let signer_3 =
        hex::decode("3ec0ca5770a356d6cd1a9bfcbf6cd151eb1bd85c388cc00648ec4ef5853fdb7401").unwrap();
    let verifying_key_1: PublicKey = k256::PublicKey::from_sec1_bytes(&signer_1).unwrap().into();
    let verifying_key_2: PublicKey = k256::PublicKey::from_sec1_bytes(&signer_2).unwrap().into();
    let verifying_key_3: PublicKey = k256::PublicKey::from_sec1_bytes(&signer_3).unwrap().into();
    let signing_set = BTreeSet::from([verifying_key_1, verifying_key_2, verifying_key_3]);

    // For example:
    let env = ExecutorEnv::builder()
        .write(&signing_set)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, VAULT_PROVER_ELF).unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(VAULT_PROVER_ID).unwrap();
}
